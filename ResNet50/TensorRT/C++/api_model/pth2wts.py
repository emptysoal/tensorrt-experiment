# -*- coding:utf-8 -*-

"""
    PyTorch 模型转 wts 文件
"""

import struct
import torch
from concise_resnet50 import ResNet50

classes_num = 5
input_size = (224, 224)  # (rows, cols)
pth_file = "../../../PyTorch/model/best.pth"
wts_file = "./para.wts"

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


def main():
    print('cuda device count: ', torch.cuda.device_count())

    net = ResNet50(classes_num=classes_num)
    net.load_state_dict(torch.load(pth_file, map_location="cpu"))
    net.to(device)
    net.eval()
    print('model: ', net)
    tmp = torch.ones(1, 3, input_size[0], input_size[1]).to(device)
    print('input: ', tmp)
    out = net(tmp)
    print('output:', out)

    f = open(wts_file, "w")
    f.write("{}\n".format(len(net.state_dict().keys())))
    for k, v in net.state_dict().items():
        print("Key: ", k, " Value: ", v.shape, " To numpy shape: ", v.cpu().numpy().shape)
        vr = v.reshape(-1).cpu().numpy()
        f.write("{} {}".format(k, len(vr)))
        for vv in vr:
            f.write(" ")
            f.write(struct.pack(">f", float(vv)).hex())
        f.write("\n")


if __name__ == '__main__':
    main()


"""
Key:  conv1.weight  Value:  torch.Size([64, 3, 7, 7])  To numpy shape:  (64, 3, 7, 7)
Key:  bn1.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  bn1.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  bn1.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  bn1.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.0.conv1.weight  Value:  torch.Size([64, 64, 1, 1])  To numpy shape:  (64, 64, 1, 1)
Key:  layer1.0.bn1.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn1.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn1.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn1.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.0.conv2.weight  Value:  torch.Size([64, 64, 3, 3])  To numpy shape:  (64, 64, 3, 3)
Key:  layer1.0.bn2.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn2.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn2.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn2.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.0.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.0.conv3.weight  Value:  torch.Size([256, 64, 1, 1])  To numpy shape:  (256, 64, 1, 1)
Key:  layer1.0.bn3.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.bn3.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.bn3.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.bn3.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.0.downsample.0.weight  Value:  torch.Size([256, 64, 1, 1])  To numpy shape:  (256, 64, 1, 1)
Key:  layer1.0.downsample.1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.downsample.1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.downsample.1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.downsample.1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.0.downsample.1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.1.conv1.weight  Value:  torch.Size([64, 256, 1, 1])  To numpy shape:  (64, 256, 1, 1)
Key:  layer1.1.bn1.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn1.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn1.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn1.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.1.conv2.weight  Value:  torch.Size([64, 64, 3, 3])  To numpy shape:  (64, 64, 3, 3)
Key:  layer1.1.bn2.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn2.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn2.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn2.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.1.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.1.conv3.weight  Value:  torch.Size([256, 64, 1, 1])  To numpy shape:  (256, 64, 1, 1)
Key:  layer1.1.bn3.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.1.bn3.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.1.bn3.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.1.bn3.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.1.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.2.conv1.weight  Value:  torch.Size([64, 256, 1, 1])  To numpy shape:  (64, 256, 1, 1)
Key:  layer1.2.bn1.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn1.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn1.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn1.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.2.conv2.weight  Value:  torch.Size([64, 64, 3, 3])  To numpy shape:  (64, 64, 3, 3)
Key:  layer1.2.bn2.weight  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn2.bias  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn2.running_mean  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn2.running_var  Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  layer1.2.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer1.2.conv3.weight  Value:  torch.Size([256, 64, 1, 1])  To numpy shape:  (256, 64, 1, 1)
Key:  layer1.2.bn3.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.2.bn3.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.2.bn3.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.2.bn3.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer1.2.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.0.conv1.weight  Value:  torch.Size([128, 256, 1, 1])  To numpy shape:  (128, 256, 1, 1)
Key:  layer2.0.bn1.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn1.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn1.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn1.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.0.conv2.weight  Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  layer2.0.bn2.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn2.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn2.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn2.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.0.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.0.conv3.weight  Value:  torch.Size([512, 128, 1, 1])  To numpy shape:  (512, 128, 1, 1)
Key:  layer2.0.bn3.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.bn3.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.bn3.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.bn3.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.0.downsample.0.weight  Value:  torch.Size([512, 256, 1, 1])  To numpy shape:  (512, 256, 1, 1)
Key:  layer2.0.downsample.1.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.downsample.1.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.downsample.1.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.downsample.1.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.0.downsample.1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.1.conv1.weight  Value:  torch.Size([128, 512, 1, 1])  To numpy shape:  (128, 512, 1, 1)
Key:  layer2.1.bn1.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn1.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn1.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn1.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.1.conv2.weight  Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  layer2.1.bn2.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn2.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn2.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn2.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.1.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.1.conv3.weight  Value:  torch.Size([512, 128, 1, 1])  To numpy shape:  (512, 128, 1, 1)
Key:  layer2.1.bn3.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.1.bn3.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.1.bn3.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.1.bn3.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.1.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.2.conv1.weight  Value:  torch.Size([128, 512, 1, 1])  To numpy shape:  (128, 512, 1, 1)
Key:  layer2.2.bn1.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn1.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn1.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn1.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.2.conv2.weight  Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  layer2.2.bn2.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn2.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn2.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn2.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.2.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.2.conv3.weight  Value:  torch.Size([512, 128, 1, 1])  To numpy shape:  (512, 128, 1, 1)
Key:  layer2.2.bn3.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.2.bn3.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.2.bn3.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.2.bn3.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.2.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.3.conv1.weight  Value:  torch.Size([128, 512, 1, 1])  To numpy shape:  (128, 512, 1, 1)
Key:  layer2.3.bn1.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn1.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn1.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn1.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.3.conv2.weight  Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  layer2.3.bn2.weight  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn2.bias  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn2.running_mean  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn2.running_var  Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  layer2.3.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer2.3.conv3.weight  Value:  torch.Size([512, 128, 1, 1])  To numpy shape:  (512, 128, 1, 1)
Key:  layer2.3.bn3.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.3.bn3.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.3.bn3.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.3.bn3.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer2.3.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.0.conv1.weight  Value:  torch.Size([256, 512, 1, 1])  To numpy shape:  (256, 512, 1, 1)
Key:  layer3.0.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.0.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.0.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.0.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.0.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.0.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.0.downsample.0.weight  Value:  torch.Size([1024, 512, 1, 1])  To numpy shape:  (1024, 512, 1, 1)
Key:  layer3.0.downsample.1.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.downsample.1.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.downsample.1.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.downsample.1.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.0.downsample.1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.1.conv1.weight  Value:  torch.Size([256, 1024, 1, 1])  To numpy shape:  (256, 1024, 1, 1)
Key:  layer3.1.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.1.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.1.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.1.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.1.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.1.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.1.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.1.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.1.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.1.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.2.conv1.weight  Value:  torch.Size([256, 1024, 1, 1])  To numpy shape:  (256, 1024, 1, 1)
Key:  layer3.2.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.2.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.2.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.2.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.2.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.2.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.2.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.2.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.2.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.2.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.3.conv1.weight  Value:  torch.Size([256, 1024, 1, 1])  To numpy shape:  (256, 1024, 1, 1)
Key:  layer3.3.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.3.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.3.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.3.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.3.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.3.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.3.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.3.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.3.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.3.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.4.conv1.weight  Value:  torch.Size([256, 1024, 1, 1])  To numpy shape:  (256, 1024, 1, 1)
Key:  layer3.4.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.4.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.4.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.4.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.4.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.4.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.4.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.4.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.4.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.4.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.5.conv1.weight  Value:  torch.Size([256, 1024, 1, 1])  To numpy shape:  (256, 1024, 1, 1)
Key:  layer3.5.bn1.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn1.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn1.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn1.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.5.conv2.weight  Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  layer3.5.bn2.weight  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn2.bias  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn2.running_mean  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn2.running_var  Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  layer3.5.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer3.5.conv3.weight  Value:  torch.Size([1024, 256, 1, 1])  To numpy shape:  (1024, 256, 1, 1)
Key:  layer3.5.bn3.weight  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.5.bn3.bias  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.5.bn3.running_mean  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.5.bn3.running_var  Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  layer3.5.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.0.conv1.weight  Value:  torch.Size([512, 1024, 1, 1])  To numpy shape:  (512, 1024, 1, 1)
Key:  layer4.0.bn1.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn1.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn1.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn1.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.0.conv2.weight  Value:  torch.Size([512, 512, 3, 3])  To numpy shape:  (512, 512, 3, 3)
Key:  layer4.0.bn2.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn2.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn2.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn2.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.0.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.0.conv3.weight  Value:  torch.Size([2048, 512, 1, 1])  To numpy shape:  (2048, 512, 1, 1)
Key:  layer4.0.bn3.weight  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.bn3.bias  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.bn3.running_mean  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.bn3.running_var  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.0.downsample.0.weight  Value:  torch.Size([2048, 1024, 1, 1])  To numpy shape:  (2048, 1024, 1, 1)
Key:  layer4.0.downsample.1.weight  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.downsample.1.bias  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.downsample.1.running_mean  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.downsample.1.running_var  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.0.downsample.1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.1.conv1.weight  Value:  torch.Size([512, 2048, 1, 1])  To numpy shape:  (512, 2048, 1, 1)
Key:  layer4.1.bn1.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn1.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn1.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn1.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.1.conv2.weight  Value:  torch.Size([512, 512, 3, 3])  To numpy shape:  (512, 512, 3, 3)
Key:  layer4.1.bn2.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn2.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn2.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn2.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.1.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.1.conv3.weight  Value:  torch.Size([2048, 512, 1, 1])  To numpy shape:  (2048, 512, 1, 1)
Key:  layer4.1.bn3.weight  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.1.bn3.bias  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.1.bn3.running_mean  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.1.bn3.running_var  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.1.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.2.conv1.weight  Value:  torch.Size([512, 2048, 1, 1])  To numpy shape:  (512, 2048, 1, 1)
Key:  layer4.2.bn1.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn1.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn1.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn1.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn1.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.2.conv2.weight  Value:  torch.Size([512, 512, 3, 3])  To numpy shape:  (512, 512, 3, 3)
Key:  layer4.2.bn2.weight  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn2.bias  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn2.running_mean  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn2.running_var  Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  layer4.2.bn2.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  layer4.2.conv3.weight  Value:  torch.Size([2048, 512, 1, 1])  To numpy shape:  (2048, 512, 1, 1)
Key:  layer4.2.bn3.weight  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.2.bn3.bias  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.2.bn3.running_mean  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.2.bn3.running_var  Value:  torch.Size([2048])  To numpy shape:  (2048,)
Key:  layer4.2.bn3.num_batches_tracked  Value:  torch.Size([])  To numpy shape:  ()
Key:  fc.weight  Value:  torch.Size([5, 2048])  To numpy shape:  (5, 2048)
Key:  fc.bias  Value:  torch.Size([5])  To numpy shape:  (5,)
"""
