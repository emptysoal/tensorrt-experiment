# -*- coding:utf-8 -*-

"""
    PyTorch 模型转 npz 文件
"""

import torch
import numpy as np

from unet.unet_model import UNet

classes_num = 32
input_height = 448
input_width = 448
pth_file = "../../../PyTorch/model/best.pth"
para_file = "./para.npz"

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")


def main():
    print('cuda device count: ', torch.cuda.device_count())

    net = UNet(n_channels=3, n_classes=classes_num)
    net.load_state_dict(torch.load(pth_file, map_location="cpu"))
    net.to(device)
    net.eval()
    print('model: ', net)
    tmp = torch.ones(1, 3, input_height, input_width).to(device)
    print('input: ', tmp)
    out = net(tmp)
    print('output:', out)

    para = {}  # save weight as npz file
    for k, v in net.state_dict().items():
        para[k] = v.cpu().numpy()
        print("Key: ", k, "Value: ", v.shape, " To numpy shape: ", v.cpu().numpy().shape)
    np.savez(para_file, **para)


if __name__ == '__main__':
    main()

"""
Key:  inc.double_conv.0.weight Value:  torch.Size([64, 3, 3, 3])  To numpy shape:  (64, 3, 3, 3)
Key:  inc.double_conv.1.weight Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.1.bias Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.1.running_mean Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.1.running_var Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  inc.double_conv.3.weight Value:  torch.Size([64, 64, 3, 3])  To numpy shape:  (64, 64, 3, 3)
Key:  inc.double_conv.4.weight Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.4.bias Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.4.running_mean Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.4.running_var Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  inc.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down1.maxpool_conv.1.double_conv.0.weight Value:  torch.Size([128, 64, 3, 3])  To numpy shape:  (128, 64, 3, 3)
Key:  down1.maxpool_conv.1.double_conv.1.weight Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.1.bias Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.1.running_mean Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.1.running_var Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down1.maxpool_conv.1.double_conv.3.weight Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  down1.maxpool_conv.1.double_conv.4.weight Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.4.bias Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.4.running_mean Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.4.running_var Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  down1.maxpool_conv.1.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down2.maxpool_conv.1.double_conv.0.weight Value:  torch.Size([256, 128, 3, 3])  To numpy shape:  (256, 128, 3, 3)
Key:  down2.maxpool_conv.1.double_conv.1.weight Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.1.bias Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.1.running_mean Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.1.running_var Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down2.maxpool_conv.1.double_conv.3.weight Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  down2.maxpool_conv.1.double_conv.4.weight Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.4.bias Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.4.running_mean Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.4.running_var Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  down2.maxpool_conv.1.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down3.maxpool_conv.1.double_conv.0.weight Value:  torch.Size([512, 256, 3, 3])  To numpy shape:  (512, 256, 3, 3)
Key:  down3.maxpool_conv.1.double_conv.1.weight Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.1.bias Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.1.running_mean Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.1.running_var Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down3.maxpool_conv.1.double_conv.3.weight Value:  torch.Size([512, 512, 3, 3])  To numpy shape:  (512, 512, 3, 3)
Key:  down3.maxpool_conv.1.double_conv.4.weight Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.4.bias Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.4.running_mean Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.4.running_var Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  down3.maxpool_conv.1.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down4.maxpool_conv.1.double_conv.0.weight Value:  torch.Size([1024, 512, 3, 3])  To numpy shape:  (1024, 512, 3, 3)
Key:  down4.maxpool_conv.1.double_conv.1.weight Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.1.bias Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.1.running_mean Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.1.running_var Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  down4.maxpool_conv.1.double_conv.3.weight Value:  torch.Size([1024, 1024, 3, 3])  To numpy shape:  (1024, 1024, 3, 3)
Key:  down4.maxpool_conv.1.double_conv.4.weight Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.4.bias Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.4.running_mean Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.4.running_var Value:  torch.Size([1024])  To numpy shape:  (1024,)
Key:  down4.maxpool_conv.1.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up1.up.weight Value:  torch.Size([1024, 512, 2, 2])  To numpy shape:  (1024, 512, 2, 2)
Key:  up1.up.bias Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.0.weight Value:  torch.Size([512, 1024, 3, 3])  To numpy shape:  (512, 1024, 3, 3)
Key:  up1.conv.double_conv.1.weight Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.1.bias Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.1.running_mean Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.1.running_var Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up1.conv.double_conv.3.weight Value:  torch.Size([512, 512, 3, 3])  To numpy shape:  (512, 512, 3, 3)
Key:  up1.conv.double_conv.4.weight Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.4.bias Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.4.running_mean Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.4.running_var Value:  torch.Size([512])  To numpy shape:  (512,)
Key:  up1.conv.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up2.up.weight Value:  torch.Size([512, 256, 2, 2])  To numpy shape:  (512, 256, 2, 2)
Key:  up2.up.bias Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.0.weight Value:  torch.Size([256, 512, 3, 3])  To numpy shape:  (256, 512, 3, 3)
Key:  up2.conv.double_conv.1.weight Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.1.bias Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.1.running_mean Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.1.running_var Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up2.conv.double_conv.3.weight Value:  torch.Size([256, 256, 3, 3])  To numpy shape:  (256, 256, 3, 3)
Key:  up2.conv.double_conv.4.weight Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.4.bias Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.4.running_mean Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.4.running_var Value:  torch.Size([256])  To numpy shape:  (256,)
Key:  up2.conv.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up3.up.weight Value:  torch.Size([256, 128, 2, 2])  To numpy shape:  (256, 128, 2, 2)
Key:  up3.up.bias Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.0.weight Value:  torch.Size([128, 256, 3, 3])  To numpy shape:  (128, 256, 3, 3)
Key:  up3.conv.double_conv.1.weight Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.1.bias Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.1.running_mean Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.1.running_var Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up3.conv.double_conv.3.weight Value:  torch.Size([128, 128, 3, 3])  To numpy shape:  (128, 128, 3, 3)
Key:  up3.conv.double_conv.4.weight Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.4.bias Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.4.running_mean Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.4.running_var Value:  torch.Size([128])  To numpy shape:  (128,)
Key:  up3.conv.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up4.up.weight Value:  torch.Size([128, 64, 2, 2])  To numpy shape:  (128, 64, 2, 2)
Key:  up4.up.bias Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.0.weight Value:  torch.Size([64, 128, 3, 3])  To numpy shape:  (64, 128, 3, 3)
Key:  up4.conv.double_conv.1.weight Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.1.bias Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.1.running_mean Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.1.running_var Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.1.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  up4.conv.double_conv.3.weight Value:  torch.Size([64, 64, 3, 3])  To numpy shape:  (64, 64, 3, 3)
Key:  up4.conv.double_conv.4.weight Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.4.bias Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.4.running_mean Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.4.running_var Value:  torch.Size([64])  To numpy shape:  (64,)
Key:  up4.conv.double_conv.4.num_batches_tracked Value:  torch.Size([])  To numpy shape:  ()
Key:  outc.conv.weight Value:  torch.Size([32, 64, 1, 1])  To numpy shape:  (32, 64, 1, 1)
Key:  outc.conv.bias Value:  torch.Size([32])  To numpy shape:  (32,)
"""